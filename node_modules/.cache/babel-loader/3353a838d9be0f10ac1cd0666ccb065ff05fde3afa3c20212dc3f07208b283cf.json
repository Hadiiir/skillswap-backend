{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/home/hader/skillswap-backend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { authAPI } from \"../services/api\";\nimport api from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n        api.setToken(token);\n        try {\n          const userData = await authAPI.getProfile();\n          setUser(userData);\n        } catch (error) {\n          console.error(\"Failed to get user profile:\", error);\n          localStorage.removeItem(\"token\");\n          api.setToken(null);\n        }\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(credentials);\n\n      // Handle different response structures\n      let token;\n      let userData;\n      if (response.access) {\n        // JWT token response\n        token = response.access;\n        userData = response.user || (await authAPI.getProfile());\n      } else if (response.token) {\n        // Token auth response\n        token = response.token;\n        userData = response.user || (await authAPI.getProfile());\n      } else if (response.key) {\n        // Key auth response\n        token = response.key;\n        userData = response.user || (await authAPI.getProfile());\n      } else if (response.auth_token) {\n        // Auth token response\n        token = response.auth_token;\n        userData = response.user || (await authAPI.getProfile());\n      } else {\n        throw new Error(\"Invalid response format\");\n      }\n      api.setToken(token);\n      setUser(userData);\n      toast.success(\"تم تسجيل الدخول بنجاح!\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      const errorMessage = error.message || \"فشل في تسجيل الدخول\";\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const response = await authAPI.register(userData);\n\n      // Handle different response structures\n      let token = null;\n      let newUser = null;\n      if (response.access) {\n        // JWT token response\n        token = response.access;\n        newUser = response.user || (await authAPI.getProfile());\n      } else if (response.token) {\n        // Token auth response\n        token = response.token;\n        newUser = response.user || (await authAPI.getProfile());\n      } else if (response.key) {\n        // Key auth response\n        token = response.key;\n        newUser = response.user || (await authAPI.getProfile());\n      } else if (response.auth_token) {\n        // Auth token response\n        token = response.auth_token;\n        newUser = response.user || (await authAPI.getProfile());\n      }\n      if (token && newUser) {\n        api.setToken(token);\n        setUser(newUser);\n        toast.success(\"تم إنشاء الحساب وتسجيل الدخول بنجاح!\");\n      } else {\n        toast.success(\"تم إنشاء الحساب بنجاح! يرجى تسجيل الدخول.\");\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      let errorMessage = \"فشل في إنشاء الحساب\";\n      if (error.message) {\n        if (error.message.includes(\"email\")) {\n          errorMessage = \"البريد الإلكتروني مستخدم بالفعل\";\n        } else if (error.message.includes(\"password\")) {\n          errorMessage = \"كلمة المرور ضعيفة جداً\";\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    api.setToken(null);\n    setUser(null);\n    toast.info(\"تم تسجيل الخروج\");\n  };\n  const updateProfile = async data => {\n    try {\n      const updatedUser = await authAPI.updateProfile(data);\n      setUser(updatedUser);\n      toast.success(\"تم تحديث الملف الشخصي بنجاح!\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      const errorMessage = error.message || \"فشل في تحديث الملف الشخصي\";\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const updateUser = async data => {\n    try {\n      const updatedUser = await authAPI.updateProfile(data);\n      setUser(updatedUser);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","authAPI","api","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","initAuth","token","localStorage","getItem","setToken","userData","getProfile","error","console","removeItem","login","credentials","response","access","key","auth_token","success","errorMessage","message","register","newUser","includes","logout","info","updateProfile","data","updatedUser","updateUser","value","isAuthenticated","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hader/skillswap-backend/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\nimport type { User, AuthContextType, LoginResponse, RegisterResponse } from \"../types\"\nimport { authAPI } from \"../services/api\"\nimport api from \"../services/api\"\nimport { toast } from \"react-toastify\"\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem(\"token\")\n      if (token) {\n        api.setToken(token)\n        try {\n          const userData = await authAPI.getProfile()\n          setUser(userData)\n        } catch (error) {\n          console.error(\"Failed to get user profile:\", error)\n          localStorage.removeItem(\"token\")\n          api.setToken(null)\n        }\n      }\n      setLoading(false)\n    }\n\n    initAuth()\n  }, [])\n\n  const login = async (credentials: { email: string; password: string }) => {\n    try {\n      setLoading(true)\n      const response: LoginResponse = await authAPI.login(credentials)\n\n      // Handle different response structures\n      let token: string\n      let userData: User\n\n      if (response.access) {\n        // JWT token response\n        token = response.access\n        userData = response.user || (await authAPI.getProfile())\n      } else if (response.token) {\n        // Token auth response\n        token = response.token\n        userData = response.user || (await authAPI.getProfile())\n      } else if (response.key) {\n        // Key auth response\n        token = response.key\n        userData = response.user || (await authAPI.getProfile())\n      } else if (response.auth_token) {\n        // Auth token response\n        token = response.auth_token\n        userData = response.user || (await authAPI.getProfile())\n      } else {\n        throw new Error(\"Invalid response format\")\n      }\n\n      api.setToken(token)\n      setUser(userData)\n      toast.success(\"تم تسجيل الدخول بنجاح!\")\n\n      return { success: true }\n    } catch (error: any) {\n      console.error(\"Login error:\", error)\n      const errorMessage = error.message || \"فشل في تسجيل الدخول\"\n      toast.error(errorMessage)\n      return { success: false, error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const register = async (userData: {\n    first_name: string\n    last_name: string\n    email: string\n    password: string\n  }) => {\n    try {\n      setLoading(true)\n      const response: RegisterResponse = await authAPI.register(userData)\n\n      // Handle different response structures\n      let token: string | null = null\n      let newUser: User | null = null\n\n      if (response.access) {\n        // JWT token response\n        token = response.access\n        newUser = response.user || (await authAPI.getProfile())\n      } else if (response.token) {\n        // Token auth response\n        token = response.token\n        newUser = response.user || (await authAPI.getProfile())\n      } else if (response.key) {\n        // Key auth response\n        token = response.key\n        newUser = response.user || (await authAPI.getProfile())\n      } else if (response.auth_token) {\n        // Auth token response\n        token = response.auth_token\n        newUser = response.user || (await authAPI.getProfile())\n      }\n\n      if (token && newUser) {\n        api.setToken(token)\n        setUser(newUser)\n        toast.success(\"تم إنشاء الحساب وتسجيل الدخول بنجاح!\")\n      } else {\n        toast.success(\"تم إنشاء الحساب بنجاح! يرجى تسجيل الدخول.\")\n      }\n\n      return { success: true }\n    } catch (error: any) {\n      console.error(\"Registration error:\", error)\n      let errorMessage = \"فشل في إنشاء الحساب\"\n\n      if (error.message) {\n        if (error.message.includes(\"email\")) {\n          errorMessage = \"البريد الإلكتروني مستخدم بالفعل\"\n        } else if (error.message.includes(\"password\")) {\n          errorMessage = \"كلمة المرور ضعيفة جداً\"\n        } else {\n          errorMessage = error.message\n        }\n      }\n\n      toast.error(errorMessage)\n      return { success: false, error: errorMessage }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem(\"token\")\n    api.setToken(null)\n    setUser(null)\n    toast.info(\"تم تسجيل الخروج\")\n  }\n\n  const updateProfile = async (data: Partial<User>) => {\n    try {\n      const updatedUser = await authAPI.updateProfile(data)\n      setUser(updatedUser)\n      toast.success(\"تم تحديث الملف الشخصي بنجاح!\")\n      return { success: true }\n    } catch (error: any) {\n      console.error(\"Profile update error:\", error)\n      const errorMessage = error.message || \"فشل في تحديث الملف الشخصي\"\n      toast.error(errorMessage)\n      return { success: false, error: errorMessage }\n    }\n  }\n\n  const updateUser = async (data: Partial<User>) => {\n    try {\n      const updatedUser = await authAPI.updateProfile(data)\n      setUser(updatedUser)\n    } catch (error: any) {\n      throw error\n    }\n  }\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}