{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/home/hader/skillswap-backend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { authAPI } from \"../services/api\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      fetchProfile();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const fetchProfile = async () => {\n    try {\n      const response = await authAPI.getProfile();\n      setUser(response.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await authAPI.login(credentials);\n      const {\n        access,\n        refresh,\n        user\n      } = response.data;\n      localStorage.setItem(\"accessToken\", access);\n      localStorage.setItem(\"refreshToken\", refresh);\n      setUser(user);\n      setIsAuthenticated(true);\n      toast.success(\"Login successful!\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || \"Login failed\";\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      await authAPI.register(userData);\n      toast.success(\"Registration successful! Please login.\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || \"Registration failed\";\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n    } catch (error) {\n      // Ignore logout errors\n    } finally {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      setUser(null);\n      setIsAuthenticated(false);\n      toast.success(\"Logged out successfully\");\n    }\n  };\n  const updateProfile = async userData => {\n    try {\n      const response = await authAPI.updateProfile(userData);\n      setUser(response.data);\n      toast.success(\"Profile updated successfully!\");\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || \"Update failed\";\n      toast.error(message);\n      return {\n        success: false,\n        error: message\n      };\n    }\n  };\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser,\n    fetchProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","authAPI","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","fetchProfile","response","getProfile","data","error","removeItem","login","credentials","access","refresh","setItem","success","_error$response","_error$response$data","message","detail","register","userData","_error$response2","_error$response2$data","logout","updateProfile","_error$response3","_error$response3$data","updateUser","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hader/skillswap-backend/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\nimport { authAPI } from \"../services/api\"\nimport type { User } from \"../types\"\nimport { toast } from \"react-toastify\"\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  isAuthenticated: boolean\n  login: (credentials: { email: string; password: string }) => Promise<{ success: boolean; error?: string }>\n  register: (userData: {\n    first_name: string\n    last_name: string\n    email: string\n    password: string\n  }) => Promise<{ success: boolean; error?: string }>\n  logout: () => Promise<void>\n  updateProfile: (userData: Partial<User>) => Promise<{ success: boolean; error?: string }>\n  updateUser: (userData: User) => void\n  fetchProfile: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"accessToken\")\n    if (token) {\n      fetchProfile()\n    } else {\n      setLoading(false)\n    }\n  }, [])\n\n  const fetchProfile = async (): Promise<void> => {\n    try {\n      const response = await authAPI.getProfile()\n      setUser(response.data)\n      setIsAuthenticated(true)\n    } catch (error) {\n      localStorage.removeItem(\"accessToken\")\n      localStorage.removeItem(\"refreshToken\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const login = async (credentials: { email: string; password: string }) => {\n    try {\n      const response = await authAPI.login(credentials)\n      const { access, refresh, user } = response.data\n\n      localStorage.setItem(\"accessToken\", access)\n      localStorage.setItem(\"refreshToken\", refresh)\n\n      setUser(user)\n      setIsAuthenticated(true)\n\n      toast.success(\"Login successful!\")\n      return { success: true }\n    } catch (error: any) {\n      const message = error.response?.data?.detail || \"Login failed\"\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const register = async (userData: {\n    first_name: string\n    last_name: string\n    email: string\n    password: string\n  }) => {\n    try {\n      await authAPI.register(userData)\n      toast.success(\"Registration successful! Please login.\")\n      return { success: true }\n    } catch (error: any) {\n      const message = error.response?.data?.detail || \"Registration failed\"\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const logout = async (): Promise<void> => {\n    try {\n      await authAPI.logout()\n    } catch (error) {\n      // Ignore logout errors\n    } finally {\n      localStorage.removeItem(\"accessToken\")\n      localStorage.removeItem(\"refreshToken\")\n      setUser(null)\n      setIsAuthenticated(false)\n      toast.success(\"Logged out successfully\")\n    }\n  }\n\n  const updateProfile = async (userData: Partial<User>) => {\n    try {\n      const response = await authAPI.updateProfile(userData)\n      setUser(response.data)\n      toast.success(\"Profile updated successfully!\")\n      return { success: true }\n    } catch (error: any) {\n      const message = error.response?.data?.detail || \"Update failed\"\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const updateUser = (userData: User): void => {\n    setUser(userData)\n  }\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updateUser,\n    fetchProfile,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}